### YamlMime:ManagedReference
items:
- uid: Unimake.Business.DFe.Utility.Converter
  commentId: T:Unimake.Business.DFe.Utility.Converter
  id: Converter
  parent: Unimake.Business.DFe.Utility
  children:
  - Unimake.Business.DFe.Utility.Converter.StringToStreamUTF8(System.String)
  - Unimake.Business.DFe.Utility.Converter.ToAny(System.Type,System.Object)
  - Unimake.Business.DFe.Utility.Converter.ToAny``1(System.Object)
  - Unimake.Business.DFe.Utility.Converter.ToDouble(System.Object)
  - Unimake.Business.DFe.Utility.Converter.ToEnum``1(System.String)
  - Unimake.Business.DFe.Utility.Converter.ToHexadecimal(System.String)
  - Unimake.Business.DFe.Utility.Converter.ToRSASHA1(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)
  - Unimake.Business.DFe.Utility.Converter.ToSHA1HashData(System.String)
  - Unimake.Business.DFe.Utility.Converter.ToSHA1HashData(System.String,System.Boolean)
  langs:
  - csharp
  - vb
  name: Converter
  nameWithType: Converter
  fullName: Unimake.Business.DFe.Utility.Converter
  type: Class
  source:
    id: Converter
    path: D:\projetos\uninfe\trunk\fontes\.NET Standard\Unimake.Business.DFe\Utility\Converter.cs
    startLine: 14
  assemblies:
  - Unimake.Business.DFe
  namespace: Unimake.Business.DFe.Utility
  summary: "\nClasse para conversão de objetos\n"
  example: []
  syntax:
    content: public static class Converter
    content.vb: Public Module Converter
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Unimake.Business.DFe.Utility.Converter.StringToStreamUTF8(System.String)
  commentId: M:Unimake.Business.DFe.Utility.Converter.StringToStreamUTF8(System.String)
  id: StringToStreamUTF8(System.String)
  parent: Unimake.Business.DFe.Utility.Converter
  langs:
  - csharp
  - vb
  name: StringToStreamUTF8(String)
  nameWithType: Converter.StringToStreamUTF8(String)
  fullName: Unimake.Business.DFe.Utility.Converter.StringToStreamUTF8(System.String)
  type: Method
  source:
    id: StringToStreamUTF8
    path: D:\projetos\uninfe\trunk\fontes\.NET Standard\Unimake.Business.DFe\Utility\Converter.cs
    startLine: 101
  assemblies:
  - Unimake.Business.DFe
  namespace: Unimake.Business.DFe.Utility
  summary: "\nConverter string para MemoryStream com  UTF8 Encoding\n"
  example: []
  syntax:
    content: public static MemoryStream StringToStreamUTF8(string contentConvert)
    parameters:
    - id: contentConvert
      type: System.String
      description: Conteúdo a ser convertido
    return:
      type: System.IO.MemoryStream
      description: Conteúdo convertido para MemoryStrem com UTF8 Encoding
    content.vb: Public Shared Function StringToStreamUTF8(contentConvert As String) As MemoryStream
  overload: Unimake.Business.DFe.Utility.Converter.StringToStreamUTF8*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Unimake.Business.DFe.Utility.Converter.ToAny``1(System.Object)
  commentId: M:Unimake.Business.DFe.Utility.Converter.ToAny``1(System.Object)
  id: ToAny``1(System.Object)
  parent: Unimake.Business.DFe.Utility.Converter
  langs:
  - csharp
  - vb
  name: ToAny<T>(Object)
  nameWithType: Converter.ToAny<T>(Object)
  fullName: Unimake.Business.DFe.Utility.Converter.ToAny<T>(System.Object)
  type: Method
  source:
    id: ToAny
    path: D:\projetos\uninfe\trunk\fontes\.NET Standard\Unimake.Business.DFe\Utility\Converter.cs
    startLine: 118
  assemblies:
  - Unimake.Business.DFe
  namespace: Unimake.Business.DFe.Utility
  summary: "\nTenta converter qualquer objeto passado em value para o tipo esperado em T\n"
  example: []
  syntax:
    content: public static T ToAny<T>(object value)
    parameters:
    - id: value
      type: System.Object
      description: Valor que deverá ser convertido
    typeParameters:
    - id: T
      description: Tipo esperado para conversão
    return:
      type: '{T}'
      description: Value convertido em T
    content.vb: Public Shared Function ToAny(Of T)(value As Object) As T
  overload: Unimake.Business.DFe.Utility.Converter.ToAny*
  nameWithType.vb: Converter.ToAny(Of T)(Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Unimake.Business.DFe.Utility.Converter.ToAny(Of T)(System.Object)
  name.vb: ToAny(Of T)(Object)
- uid: Unimake.Business.DFe.Utility.Converter.ToAny(System.Type,System.Object)
  commentId: M:Unimake.Business.DFe.Utility.Converter.ToAny(System.Type,System.Object)
  id: ToAny(System.Type,System.Object)
  parent: Unimake.Business.DFe.Utility.Converter
  langs:
  - csharp
  - vb
  name: ToAny(Type, Object)
  nameWithType: Converter.ToAny(Type, Object)
  fullName: Unimake.Business.DFe.Utility.Converter.ToAny(System.Type, System.Object)
  type: Method
  source:
    id: ToAny
    path: D:\projetos\uninfe\trunk\fontes\.NET Standard\Unimake.Business.DFe\Utility\Converter.cs
    startLine: 126
  assemblies:
  - Unimake.Business.DFe
  namespace: Unimake.Business.DFe.Utility
  summary: "\nConverter tipo de um objeto\n"
  example: []
  syntax:
    content: public static object ToAny(Type t, object value)
    parameters:
    - id: t
      type: System.Type
      description: Para qual tipo converter o conteúdo do objeto
    - id: value
      type: System.Object
      description: Conteúdo do objeto a ser convertido
    return:
      type: System.Object
      description: Conteúdo do objeto convertido para o tipo informado
    content.vb: Public Shared Function ToAny(t As Type, value As Object) As Object
  overload: Unimake.Business.DFe.Utility.Converter.ToAny*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Unimake.Business.DFe.Utility.Converter.ToDouble(System.Object)
  commentId: M:Unimake.Business.DFe.Utility.Converter.ToDouble(System.Object)
  id: ToDouble(System.Object)
  parent: Unimake.Business.DFe.Utility.Converter
  langs:
  - csharp
  - vb
  name: ToDouble(Object)
  nameWithType: Converter.ToDouble(Object)
  fullName: Unimake.Business.DFe.Utility.Converter.ToDouble(System.Object)
  type: Method
  source:
    id: ToDouble
    path: D:\projetos\uninfe\trunk\fontes\.NET Standard\Unimake.Business.DFe\Utility\Converter.cs
    startLine: 165
  assemblies:
  - Unimake.Business.DFe
  namespace: Unimake.Business.DFe.Utility
  summary: "\nConverte um valor do objeto em double\n"
  example: []
  syntax:
    content: public static double ToDouble(object value)
    parameters:
    - id: value
      type: System.Object
      description: valor a ser convertido
    return:
      type: System.Double
      description: Valor convertido para double
    content.vb: Public Shared Function ToDouble(value As Object) As Double
  overload: Unimake.Business.DFe.Utility.Converter.ToDouble*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Unimake.Business.DFe.Utility.Converter.ToEnum``1(System.String)
  commentId: M:Unimake.Business.DFe.Utility.Converter.ToEnum``1(System.String)
  id: ToEnum``1(System.String)
  isExtensionMethod: true
  parent: Unimake.Business.DFe.Utility.Converter
  langs:
  - csharp
  - vb
  name: ToEnum<T>(String)
  nameWithType: Converter.ToEnum<T>(String)
  fullName: Unimake.Business.DFe.Utility.Converter.ToEnum<T>(System.String)
  type: Method
  source:
    id: ToEnum
    path: D:\projetos\uninfe\trunk\fontes\.NET Standard\Unimake.Business.DFe\Utility\Converter.cs
    startLine: 186
  assemblies:
  - Unimake.Business.DFe
  namespace: Unimake.Business.DFe.Utility
  summary: "\nConverter STRING para ENUM\n"
  example: []
  syntax:
    content: public static T ToEnum<T>(this string value)
    parameters:
    - id: value
      type: System.String
      description: String a ser convertida
    typeParameters:
    - id: T
      description: Tipo do objeto
    return:
      type: '{T}'
      description: Retorna o Enum da string passada como parâmetro
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToEnum(Of T)(value As String) As T
  overload: Unimake.Business.DFe.Utility.Converter.ToEnum*
  nameWithType.vb: Converter.ToEnum(Of T)(String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Unimake.Business.DFe.Utility.Converter.ToEnum(Of T)(System.String)
  name.vb: ToEnum(Of T)(String)
- uid: Unimake.Business.DFe.Utility.Converter.ToHexadecimal(System.String)
  commentId: M:Unimake.Business.DFe.Utility.Converter.ToHexadecimal(System.String)
  id: ToHexadecimal(System.String)
  parent: Unimake.Business.DFe.Utility.Converter
  langs:
  - csharp
  - vb
  name: ToHexadecimal(String)
  nameWithType: Converter.ToHexadecimal(String)
  fullName: Unimake.Business.DFe.Utility.Converter.ToHexadecimal(System.String)
  type: Method
  source:
    id: ToHexadecimal
    path: D:\projetos\uninfe\trunk\fontes\.NET Standard\Unimake.Business.DFe\Utility\Converter.cs
    startLine: 193
  assemblies:
  - Unimake.Business.DFe
  namespace: Unimake.Business.DFe.Utility
  summary: "\nCalcular o valor hexadecimal de uma string\n"
  example: []
  syntax:
    content: public static string ToHexadecimal(string input)
    parameters:
    - id: input
      type: System.String
      description: Valor a ser convertido
    return:
      type: System.String
      description: Valor convertido em hexadecimal
    content.vb: Public Shared Function ToHexadecimal(input As String) As String
  overload: Unimake.Business.DFe.Utility.Converter.ToHexadecimal*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Unimake.Business.DFe.Utility.Converter.ToRSASHA1(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)
  commentId: M:Unimake.Business.DFe.Utility.Converter.ToRSASHA1(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)
  id: ToRSASHA1(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)
  parent: Unimake.Business.DFe.Utility.Converter
  langs:
  - csharp
  - vb
  name: ToRSASHA1(X509Certificate2, String)
  nameWithType: Converter.ToRSASHA1(X509Certificate2, String)
  fullName: Unimake.Business.DFe.Utility.Converter.ToRSASHA1(System.Security.Cryptography.X509Certificates.X509Certificate2, System.String)
  type: Method
  source:
    id: ToRSASHA1
    path: D:\projetos\uninfe\trunk\fontes\.NET Standard\Unimake.Business.DFe\Utility\Converter.cs
    startLine: 215
  assemblies:
  - Unimake.Business.DFe
  namespace: Unimake.Business.DFe.Utility
  summary: "\nCriptografa uma string com RSA-SHA1 e retorna o conteúdo convertido para Base64String\n"
  example: []
  syntax:
    content: public static string ToRSASHA1(X509Certificate2 certificado, string value)
    parameters:
    - id: certificado
      type: System.Security.Cryptography.X509Certificates.X509Certificate2
      description: certificado utilizado na criptografia
    - id: value
      type: System.String
      description: Conteúdo a ser criptografado
    return:
      type: System.String
      description: Retorna a string assinada com RSA SHA1 e convertida para Base64String
    content.vb: Public Shared Function ToRSASHA1(certificado As X509Certificate2, value As String) As String
  overload: Unimake.Business.DFe.Utility.Converter.ToRSASHA1*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Unimake.Business.DFe.Utility.Converter.ToSHA1HashData(System.String)
  commentId: M:Unimake.Business.DFe.Utility.Converter.ToSHA1HashData(System.String)
  id: ToSHA1HashData(System.String)
  parent: Unimake.Business.DFe.Utility.Converter
  langs:
  - csharp
  - vb
  name: ToSHA1HashData(String)
  nameWithType: Converter.ToSHA1HashData(String)
  fullName: Unimake.Business.DFe.Utility.Converter.ToSHA1HashData(System.String)
  type: Method
  source:
    id: ToSHA1HashData
    path: D:\projetos\uninfe\trunk\fontes\.NET Standard\Unimake.Business.DFe\Utility\Converter.cs
    startLine: 239
  assemblies:
  - Unimake.Business.DFe
  namespace: Unimake.Business.DFe.Utility
  summary: "\nConverte conteúdo para HSA1HashData\n"
  example: []
  syntax:
    content: public static string ToSHA1HashData(string data)
    parameters:
    - id: data
      type: System.String
      description: Conteudo a ser convertido
    return:
      type: System.String
      description: Conteúdo convertido para SH1HashData
    content.vb: Public Shared Function ToSHA1HashData(data As String) As String
  overload: Unimake.Business.DFe.Utility.Converter.ToSHA1HashData*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Unimake.Business.DFe.Utility.Converter.ToSHA1HashData(System.String,System.Boolean)
  commentId: M:Unimake.Business.DFe.Utility.Converter.ToSHA1HashData(System.String,System.Boolean)
  id: ToSHA1HashData(System.String,System.Boolean)
  parent: Unimake.Business.DFe.Utility.Converter
  langs:
  - csharp
  - vb
  name: ToSHA1HashData(String, Boolean)
  nameWithType: Converter.ToSHA1HashData(String, Boolean)
  fullName: Unimake.Business.DFe.Utility.Converter.ToSHA1HashData(System.String, System.Boolean)
  type: Method
  source:
    id: ToSHA1HashData
    path: D:\projetos\uninfe\trunk\fontes\.NET Standard\Unimake.Business.DFe\Utility\Converter.cs
    startLine: 247
  assemblies:
  - Unimake.Business.DFe
  namespace: Unimake.Business.DFe.Utility
  summary: "\nConverte conteúdo para HSA1HashData\n"
  example: []
  syntax:
    content: public static string ToSHA1HashData(string data, bool toUpper)
    parameters:
    - id: data
      type: System.String
      description: Conteudo a ser convertido
    - id: toUpper
      type: System.Boolean
      description: Resultado todo em maiúsculo?
    return:
      type: System.String
      description: Conteúdo convertido para SH1HashData
    content.vb: Public Shared Function ToSHA1HashData(data As String, toUpper As Boolean) As String
  overload: Unimake.Business.DFe.Utility.Converter.ToSHA1HashData*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Unimake.Business.DFe.Utility
  commentId: N:Unimake.Business.DFe.Utility
  name: Unimake.Business.DFe.Utility
  nameWithType: Unimake.Business.DFe.Utility
  fullName: Unimake.Business.DFe.Utility
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: Unimake.Business.DFe.Utility.Converter.StringToStreamUTF8*
  commentId: Overload:Unimake.Business.DFe.Utility.Converter.StringToStreamUTF8
  name: StringToStreamUTF8
  nameWithType: Converter.StringToStreamUTF8
  fullName: Unimake.Business.DFe.Utility.Converter.StringToStreamUTF8
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.MemoryStream
  commentId: T:System.IO.MemoryStream
  parent: System.IO
  isExternal: true
  name: MemoryStream
  nameWithType: MemoryStream
  fullName: System.IO.MemoryStream
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Unimake.Business.DFe.Utility.Converter.ToAny*
  commentId: Overload:Unimake.Business.DFe.Utility.Converter.ToAny
  name: ToAny
  nameWithType: Converter.ToAny
  fullName: Unimake.Business.DFe.Utility.Converter.ToAny
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Unimake.Business.DFe.Utility.Converter.ToDouble*
  commentId: Overload:Unimake.Business.DFe.Utility.Converter.ToDouble
  name: ToDouble
  nameWithType: Converter.ToDouble
  fullName: Unimake.Business.DFe.Utility.Converter.ToDouble
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Unimake.Business.DFe.Utility.Converter.ToEnum*
  commentId: Overload:Unimake.Business.DFe.Utility.Converter.ToEnum
  name: ToEnum
  nameWithType: Converter.ToEnum
  fullName: Unimake.Business.DFe.Utility.Converter.ToEnum
- uid: Unimake.Business.DFe.Utility.Converter.ToHexadecimal*
  commentId: Overload:Unimake.Business.DFe.Utility.Converter.ToHexadecimal
  name: ToHexadecimal
  nameWithType: Converter.ToHexadecimal
  fullName: Unimake.Business.DFe.Utility.Converter.ToHexadecimal
- uid: Unimake.Business.DFe.Utility.Converter.ToRSASHA1*
  commentId: Overload:Unimake.Business.DFe.Utility.Converter.ToRSASHA1
  name: ToRSASHA1
  nameWithType: Converter.ToRSASHA1
  fullName: Unimake.Business.DFe.Utility.Converter.ToRSASHA1
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2
  commentId: T:System.Security.Cryptography.X509Certificates.X509Certificate2
  parent: System.Security.Cryptography.X509Certificates
  isExternal: true
  name: X509Certificate2
  nameWithType: X509Certificate2
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2
- uid: System.Security.Cryptography.X509Certificates
  commentId: N:System.Security.Cryptography.X509Certificates
  isExternal: true
  name: System.Security.Cryptography.X509Certificates
  nameWithType: System.Security.Cryptography.X509Certificates
  fullName: System.Security.Cryptography.X509Certificates
- uid: Unimake.Business.DFe.Utility.Converter.ToSHA1HashData*
  commentId: Overload:Unimake.Business.DFe.Utility.Converter.ToSHA1HashData
  name: ToSHA1HashData
  nameWithType: Converter.ToSHA1HashData
  fullName: Unimake.Business.DFe.Utility.Converter.ToSHA1HashData
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
