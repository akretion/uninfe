### YamlMime:ManagedReference
items:
- uid: Unimake.Business.DFe.Utility.XMLUtility
  commentId: T:Unimake.Business.DFe.Utility.XMLUtility
  id: XMLUtility
  parent: Unimake.Business.DFe.Utility
  children:
  - Unimake.Business.DFe.Utility.XMLUtility.CalcularDVChave(System.String)
  - Unimake.Business.DFe.Utility.XMLUtility.Deserializar``1(System.String)
  - Unimake.Business.DFe.Utility.XMLUtility.Deserializar``1(System.Xml.XmlDocument)
  - Unimake.Business.DFe.Utility.XMLUtility.DetectDFeType(System.String)
  - Unimake.Business.DFe.Utility.XMLUtility.DetectDFeType(System.Xml.XmlDocument)
  - Unimake.Business.DFe.Utility.XMLUtility.GerarCodigoNumerico(System.Int32)
  - Unimake.Business.DFe.Utility.XMLUtility.GetChaveDFe(System.String)
  - Unimake.Business.DFe.Utility.XMLUtility.GetChaveDFe(System.String,Unimake.Business.DFe.Servicos.TipoDFe)
  - Unimake.Business.DFe.Utility.XMLUtility.Serializar(System.Object,System.Collections.Generic.List{Unimake.Business.DFe.Utility.XMLUtility.TNameSpace})
  - Unimake.Business.DFe.Utility.XMLUtility.Serializar``1(``0,System.Collections.Generic.List{Unimake.Business.DFe.Utility.XMLUtility.TNameSpace})
  - Unimake.Business.DFe.Utility.XMLUtility.TagExist(System.Xml.XmlElement,System.String)
  - Unimake.Business.DFe.Utility.XMLUtility.TagRead(System.Xml.XmlElement,System.String)
  langs:
  - csharp
  - vb
  name: XMLUtility
  nameWithType: XMLUtility
  fullName: Unimake.Business.DFe.Utility.XMLUtility
  type: Class
  source:
    id: XMLUtility
    path: D:\projetos\uninfe\trunk\fontes\.NET Standard\Unimake.Business.DFe\Utility\XMLUtility.cs
    startLine: 13
  assemblies:
  - Unimake.Business.DFe
  namespace: Unimake.Business.DFe.Utility
  summary: "\nUtilitários diversos para trabalhar com XML\n"
  example: []
  syntax:
    content: public static class XMLUtility
    content.vb: Public Module XMLUtility
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Unimake.Business.DFe.Utility.XMLUtility.CalcularDVChave(System.String)
  commentId: M:Unimake.Business.DFe.Utility.XMLUtility.CalcularDVChave(System.String)
  id: CalcularDVChave(System.String)
  parent: Unimake.Business.DFe.Utility.XMLUtility
  langs:
  - csharp
  - vb
  name: CalcularDVChave(String)
  nameWithType: XMLUtility.CalcularDVChave(String)
  fullName: Unimake.Business.DFe.Utility.XMLUtility.CalcularDVChave(System.String)
  type: Method
  source:
    id: CalcularDVChave
    path: D:\projetos\uninfe\trunk\fontes\.NET Standard\Unimake.Business.DFe\Utility\XMLUtility.cs
    startLine: 60
  assemblies:
  - Unimake.Business.DFe
  namespace: Unimake.Business.DFe.Utility
  summary: "\nGerar o dígito da chave da NFe, CTe, MDFe ou NFCe\n"
  example: []
  syntax:
    content: public static int CalcularDVChave(string chave)
    parameters:
    - id: chave
      type: System.String
      description: Chave do DFe (sem o dígito) que deve ser calculado o dígito verificador.
    return:
      type: System.Int32
      description: Dígito verificador
    content.vb: Public Shared Function CalcularDVChave(chave As String) As Integer
  overload: Unimake.Business.DFe.Utility.XMLUtility.CalcularDVChave*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Unimake.Business.DFe.Utility.XMLUtility.Deserializar``1(System.String)
  commentId: M:Unimake.Business.DFe.Utility.XMLUtility.Deserializar``1(System.String)
  id: Deserializar``1(System.String)
  parent: Unimake.Business.DFe.Utility.XMLUtility
  langs:
  - csharp
  - vb
  name: Deserializar<T>(String)
  nameWithType: XMLUtility.Deserializar<T>(String)
  fullName: Unimake.Business.DFe.Utility.XMLUtility.Deserializar<T>(System.String)
  type: Method
  source:
    id: Deserializar
    path: D:\projetos\uninfe\trunk\fontes\.NET Standard\Unimake.Business.DFe\Utility\XMLUtility.cs
    startLine: 112
  assemblies:
  - Unimake.Business.DFe
  namespace: Unimake.Business.DFe.Utility
  summary: "\nDeserializar XML (Converte o XML para um objeto)\n"
  example: []
  syntax:
    content: >-
      public static T Deserializar<T>(string xml)
          where T : new()
    parameters:
    - id: xml
      type: System.String
      description: XML a ser deserilizado
    typeParameters:
    - id: T
      description: Tipo do objeto
    return:
      type: '{T}'
      description: Retorna o objeto com o conteúdo do XML deserializado
    content.vb: Public Shared Function Deserializar(Of T As New)(xml As String) As T
  overload: Unimake.Business.DFe.Utility.XMLUtility.Deserializar*
  nameWithType.vb: XMLUtility.Deserializar(Of T)(String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Unimake.Business.DFe.Utility.XMLUtility.Deserializar(Of T)(System.String)
  name.vb: Deserializar(Of T)(String)
- uid: Unimake.Business.DFe.Utility.XMLUtility.Deserializar``1(System.Xml.XmlDocument)
  commentId: M:Unimake.Business.DFe.Utility.XMLUtility.Deserializar``1(System.Xml.XmlDocument)
  id: Deserializar``1(System.Xml.XmlDocument)
  parent: Unimake.Business.DFe.Utility.XMLUtility
  langs:
  - csharp
  - vb
  name: Deserializar<T>(XmlDocument)
  nameWithType: XMLUtility.Deserializar<T>(XmlDocument)
  fullName: Unimake.Business.DFe.Utility.XMLUtility.Deserializar<T>(System.Xml.XmlDocument)
  type: Method
  source:
    id: Deserializar
    path: D:\projetos\uninfe\trunk\fontes\.NET Standard\Unimake.Business.DFe\Utility\XMLUtility.cs
    startLine: 126
  assemblies:
  - Unimake.Business.DFe
  namespace: Unimake.Business.DFe.Utility
  summary: "\nDeserializar XML (Converte o XML para um objeto)\n"
  example: []
  syntax:
    content: >-
      public static T Deserializar<T>(XmlDocument doc)
          where T : new()
    parameters:
    - id: doc
      type: System.Xml.XmlDocument
      description: Conteúdo do XML a ser deserilizado
    typeParameters:
    - id: T
      description: Tipo do objeto
    return:
      type: '{T}'
      description: Retorna o objeto com o conteúdo do XML deserializado
    content.vb: Public Shared Function Deserializar(Of T As New)(doc As XmlDocument) As T
  overload: Unimake.Business.DFe.Utility.XMLUtility.Deserializar*
  nameWithType.vb: XMLUtility.Deserializar(Of T)(XmlDocument)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Unimake.Business.DFe.Utility.XMLUtility.Deserializar(Of T)(System.Xml.XmlDocument)
  name.vb: Deserializar(Of T)(XmlDocument)
- uid: Unimake.Business.DFe.Utility.XMLUtility.DetectDFeType(System.Xml.XmlDocument)
  commentId: M:Unimake.Business.DFe.Utility.XMLUtility.DetectDFeType(System.Xml.XmlDocument)
  id: DetectDFeType(System.Xml.XmlDocument)
  parent: Unimake.Business.DFe.Utility.XMLUtility
  langs:
  - csharp
  - vb
  name: DetectDFeType(XmlDocument)
  nameWithType: XMLUtility.DetectDFeType(XmlDocument)
  fullName: Unimake.Business.DFe.Utility.XMLUtility.DetectDFeType(System.Xml.XmlDocument)
  type: Method
  source:
    id: DetectDFeType
    path: D:\projetos\uninfe\trunk\fontes\.NET Standard\Unimake.Business.DFe\Utility\XMLUtility.cs
    startLine: 134
  assemblies:
  - Unimake.Business.DFe
  namespace: Unimake.Business.DFe.Utility
  summary: "\nDetectar qual o tipo de documento fiscal eletrônico do XML\n"
  example: []
  syntax:
    content: public static TipoDFe DetectDFeType(XmlDocument xml)
    parameters:
    - id: xml
      type: System.Xml.XmlDocument
      description: XML a ser analisado
    return:
      type: Unimake.Business.DFe.Servicos.TipoDFe
      description: Retorna o tipo do documento eletrônico
    content.vb: Public Shared Function DetectDFeType(xml As XmlDocument) As TipoDFe
  overload: Unimake.Business.DFe.Utility.XMLUtility.DetectDFeType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Unimake.Business.DFe.Utility.XMLUtility.DetectDFeType(System.String)
  commentId: M:Unimake.Business.DFe.Utility.XMLUtility.DetectDFeType(System.String)
  id: DetectDFeType(System.String)
  parent: Unimake.Business.DFe.Utility.XMLUtility
  langs:
  - csharp
  - vb
  name: DetectDFeType(String)
  nameWithType: XMLUtility.DetectDFeType(String)
  fullName: Unimake.Business.DFe.Utility.XMLUtility.DetectDFeType(System.String)
  type: Method
  source:
    id: DetectDFeType
    path: D:\projetos\uninfe\trunk\fontes\.NET Standard\Unimake.Business.DFe\Utility\XMLUtility.cs
    startLine: 141
  assemblies:
  - Unimake.Business.DFe
  namespace: Unimake.Business.DFe.Utility
  summary: "\nDetectar qual o tipo de documento fiscal eletrônico do XML\n"
  example: []
  syntax:
    content: public static TipoDFe DetectDFeType(string xml)
    parameters:
    - id: xml
      type: System.String
      description: XML a ser analisado
    return:
      type: Unimake.Business.DFe.Servicos.TipoDFe
      description: Retorna o tipo do documento eletrônico
    content.vb: Public Shared Function DetectDFeType(xml As String) As TipoDFe
  overload: Unimake.Business.DFe.Utility.XMLUtility.DetectDFeType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Unimake.Business.DFe.Utility.XMLUtility.GerarCodigoNumerico(System.Int32)
  commentId: M:Unimake.Business.DFe.Utility.XMLUtility.GerarCodigoNumerico(System.Int32)
  id: GerarCodigoNumerico(System.Int32)
  parent: Unimake.Business.DFe.Utility.XMLUtility
  langs:
  - csharp
  - vb
  name: GerarCodigoNumerico(Int32)
  nameWithType: XMLUtility.GerarCodigoNumerico(Int32)
  fullName: Unimake.Business.DFe.Utility.XMLUtility.GerarCodigoNumerico(System.Int32)
  type: Method
  source:
    id: GerarCodigoNumerico
    path: D:\projetos\uninfe\trunk\fontes\.NET Standard\Unimake.Business.DFe\Utility\XMLUtility.cs
    startLine: 178
  assemblies:
  - Unimake.Business.DFe
  namespace: Unimake.Business.DFe.Utility
  summary: "\nGera um número randômico para ser utilizado no Codigo Numérico da NFe, NFCe, CTe, MDFe, etc...\n"
  example: []
  syntax:
    content: public static int GerarCodigoNumerico(int numeroNF)
    parameters:
    - id: numeroNF
      type: System.Int32
      description: Número da NF, CT ou MDF
    return:
      type: System.Int32
      description: Código numérico
    content.vb: Public Shared Function GerarCodigoNumerico(numeroNF As Integer) As Integer
  overload: Unimake.Business.DFe.Utility.XMLUtility.GerarCodigoNumerico*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Unimake.Business.DFe.Utility.XMLUtility.GetChaveDFe(System.String)
  commentId: M:Unimake.Business.DFe.Utility.XMLUtility.GetChaveDFe(System.String)
  id: GetChaveDFe(System.String)
  parent: Unimake.Business.DFe.Utility.XMLUtility
  langs:
  - csharp
  - vb
  name: GetChaveDFe(String)
  nameWithType: XMLUtility.GetChaveDFe(String)
  fullName: Unimake.Business.DFe.Utility.XMLUtility.GetChaveDFe(System.String)
  type: Method
  source:
    id: GetChaveDFe
    path: D:\projetos\uninfe\trunk\fontes\.NET Standard\Unimake.Business.DFe\Utility\XMLUtility.cs
    startLine: 197
  assemblies:
  - Unimake.Business.DFe
  namespace: Unimake.Business.DFe.Utility
  summary: "\nBusca o número da chave do Documento Fiscal Eletrônico no XML do Documento Fiscal Eletrônico\n"
  example: []
  syntax:
    content: public static string GetChaveDFe(string xml)
    parameters:
    - id: xml
      type: System.String
      description: Conteúdo do XML para busca da chave
    return:
      type: System.String
      description: Chave do DFe (Documento Fiscal Eletrônico = NFe, NFCe, CTe, etc...)
    content.vb: Public Shared Function GetChaveDFe(xml As String) As String
  overload: Unimake.Business.DFe.Utility.XMLUtility.GetChaveDFe*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Unimake.Business.DFe.Utility.XMLUtility.GetChaveDFe(System.String,Unimake.Business.DFe.Servicos.TipoDFe)
  commentId: M:Unimake.Business.DFe.Utility.XMLUtility.GetChaveDFe(System.String,Unimake.Business.DFe.Servicos.TipoDFe)
  id: GetChaveDFe(System.String,Unimake.Business.DFe.Servicos.TipoDFe)
  parent: Unimake.Business.DFe.Utility.XMLUtility
  langs:
  - csharp
  - vb
  name: GetChaveDFe(String, TipoDFe)
  nameWithType: XMLUtility.GetChaveDFe(String, TipoDFe)
  fullName: Unimake.Business.DFe.Utility.XMLUtility.GetChaveDFe(System.String, Unimake.Business.DFe.Servicos.TipoDFe)
  type: Method
  source:
    id: GetChaveDFe
    path: D:\projetos\uninfe\trunk\fontes\.NET Standard\Unimake.Business.DFe\Utility\XMLUtility.cs
    startLine: 205
  assemblies:
  - Unimake.Business.DFe
  namespace: Unimake.Business.DFe.Utility
  summary: "\nBusca o número da chave do Documento Fiscal Eletrônico no XML do Documento Fiscal Eletrônico\n"
  example: []
  syntax:
    content: public static string GetChaveDFe(string xml, TipoDFe typeDFe)
    parameters:
    - id: xml
      type: System.String
      description: Conteúdo do XML para busca da chave
    - id: typeDFe
      type: Unimake.Business.DFe.Servicos.TipoDFe
      description: Tipo do DFe
    return:
      type: System.String
      description: Chave do DFe (Documento Fiscal Eletrônico = NFe, NFCe, CTe, etc...)
    content.vb: Public Shared Function GetChaveDFe(xml As String, typeDFe As TipoDFe) As String
  overload: Unimake.Business.DFe.Utility.XMLUtility.GetChaveDFe*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Unimake.Business.DFe.Utility.XMLUtility.Serializar``1(``0,System.Collections.Generic.List{Unimake.Business.DFe.Utility.XMLUtility.TNameSpace})
  commentId: M:Unimake.Business.DFe.Utility.XMLUtility.Serializar``1(``0,System.Collections.Generic.List{Unimake.Business.DFe.Utility.XMLUtility.TNameSpace})
  id: Serializar``1(``0,System.Collections.Generic.List{Unimake.Business.DFe.Utility.XMLUtility.TNameSpace})
  parent: Unimake.Business.DFe.Utility.XMLUtility
  langs:
  - csharp
  - vb
  name: Serializar<T>(T, List<XMLUtility.TNameSpace>)
  nameWithType: XMLUtility.Serializar<T>(T, List<XMLUtility.TNameSpace>)
  fullName: Unimake.Business.DFe.Utility.XMLUtility.Serializar<T>(T, System.Collections.Generic.List<Unimake.Business.DFe.Utility.XMLUtility.TNameSpace>)
  type: Method
  source:
    id: Serializar
    path: D:\projetos\uninfe\trunk\fontes\.NET Standard\Unimake.Business.DFe\Utility\XMLUtility.cs
    startLine: 246
  assemblies:
  - Unimake.Business.DFe
  namespace: Unimake.Business.DFe.Utility
  summary: "\nSerializar o objeto (Converte o objeto para XML)\n"
  example: []
  syntax:
    content: >-
      public static XmlDocument Serializar<T>(T objeto, List<XMLUtility.TNameSpace> nameSpaces = null)
          where T : new()
    parameters:
    - id: objeto
      type: '{T}'
      description: Objeto a ser serializado
    - id: nameSpaces
      type: System.Collections.Generic.List{Unimake.Business.DFe.Utility.XMLUtility.TNameSpace}
      description: Namespaces a serem adicionados no XML
    typeParameters:
    - id: T
      description: Tipo do objeto
    return:
      type: System.Xml.XmlDocument
      description: XML
    content.vb: Public Shared Function Serializar(Of T As New)(objeto As T, nameSpaces As List(Of XMLUtility.TNameSpace) = Nothing) As XmlDocument
  overload: Unimake.Business.DFe.Utility.XMLUtility.Serializar*
  nameWithType.vb: XMLUtility.Serializar(Of T)(T, List(Of XMLUtility.TNameSpace))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Unimake.Business.DFe.Utility.XMLUtility.Serializar(Of T)(T, System.Collections.Generic.List(Of Unimake.Business.DFe.Utility.XMLUtility.TNameSpace))
  name.vb: Serializar(Of T)(T, List(Of XMLUtility.TNameSpace))
- uid: Unimake.Business.DFe.Utility.XMLUtility.Serializar(System.Object,System.Collections.Generic.List{Unimake.Business.DFe.Utility.XMLUtility.TNameSpace})
  commentId: M:Unimake.Business.DFe.Utility.XMLUtility.Serializar(System.Object,System.Collections.Generic.List{Unimake.Business.DFe.Utility.XMLUtility.TNameSpace})
  id: Serializar(System.Object,System.Collections.Generic.List{Unimake.Business.DFe.Utility.XMLUtility.TNameSpace})
  parent: Unimake.Business.DFe.Utility.XMLUtility
  langs:
  - csharp
  - vb
  name: Serializar(Object, List<XMLUtility.TNameSpace>)
  nameWithType: XMLUtility.Serializar(Object, List<XMLUtility.TNameSpace>)
  fullName: Unimake.Business.DFe.Utility.XMLUtility.Serializar(System.Object, System.Collections.Generic.List<Unimake.Business.DFe.Utility.XMLUtility.TNameSpace>)
  type: Method
  source:
    id: Serializar
    path: D:\projetos\uninfe\trunk\fontes\.NET Standard\Unimake.Business.DFe\Utility\XMLUtility.cs
    startLine: 255
  assemblies:
  - Unimake.Business.DFe
  namespace: Unimake.Business.DFe.Utility
  summary: "\nSerializar o objeto (Converte o objeto para XML)\n"
  example: []
  syntax:
    content: public static XmlDocument Serializar(object objeto, List<XMLUtility.TNameSpace> nameSpaces = null)
    parameters:
    - id: objeto
      type: System.Object
      description: Objeto a ser serializado
    - id: nameSpaces
      type: System.Collections.Generic.List{Unimake.Business.DFe.Utility.XMLUtility.TNameSpace}
      description: Namespaces a serem adicionados no XML
    return:
      type: System.Xml.XmlDocument
      description: XML
    content.vb: Public Shared Function Serializar(objeto As Object, nameSpaces As List(Of XMLUtility.TNameSpace) = Nothing) As XmlDocument
  overload: Unimake.Business.DFe.Utility.XMLUtility.Serializar*
  nameWithType.vb: XMLUtility.Serializar(Object, List(Of XMLUtility.TNameSpace))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Unimake.Business.DFe.Utility.XMLUtility.Serializar(System.Object, System.Collections.Generic.List(Of Unimake.Business.DFe.Utility.XMLUtility.TNameSpace))
  name.vb: Serializar(Object, List(Of XMLUtility.TNameSpace))
- uid: Unimake.Business.DFe.Utility.XMLUtility.TagExist(System.Xml.XmlElement,System.String)
  commentId: M:Unimake.Business.DFe.Utility.XMLUtility.TagExist(System.Xml.XmlElement,System.String)
  id: TagExist(System.Xml.XmlElement,System.String)
  parent: Unimake.Business.DFe.Utility.XMLUtility
  langs:
  - csharp
  - vb
  name: TagExist(XmlElement, String)
  nameWithType: XMLUtility.TagExist(XmlElement, String)
  fullName: Unimake.Business.DFe.Utility.XMLUtility.TagExist(System.Xml.XmlElement, System.String)
  type: Method
  source:
    id: TagExist
    path: D:\projetos\uninfe\trunk\fontes\.NET Standard\Unimake.Business.DFe\Utility\XMLUtility.cs
    startLine: 288
  assemblies:
  - Unimake.Business.DFe
  namespace: Unimake.Business.DFe.Utility
  summary: "\nBusca o nome de uma determinada TAG em um Elemento do XML para ver se existe, se existir retorna seu conteúdo da TAG.\n"
  example: []
  syntax:
    content: public static bool TagExist(XmlElement xmlElement, string tagName)
    parameters:
    - id: xmlElement
      type: System.Xml.XmlElement
      description: Elemento do XML onde será pesquisado o Nome da TAG
    - id: tagName
      type: System.String
      description: Nome da Tag que será pesquisado
    return:
      type: System.Boolean
      description: Conteúdo da tag
    content.vb: Public Shared Function TagExist(xmlElement As XmlElement, tagName As String) As Boolean
  overload: Unimake.Business.DFe.Utility.XMLUtility.TagExist*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Unimake.Business.DFe.Utility.XMLUtility.TagRead(System.Xml.XmlElement,System.String)
  commentId: M:Unimake.Business.DFe.Utility.XMLUtility.TagRead(System.Xml.XmlElement,System.String)
  id: TagRead(System.Xml.XmlElement,System.String)
  parent: Unimake.Business.DFe.Utility.XMLUtility
  langs:
  - csharp
  - vb
  name: TagRead(XmlElement, String)
  nameWithType: XMLUtility.TagRead(XmlElement, String)
  fullName: Unimake.Business.DFe.Utility.XMLUtility.TagRead(System.Xml.XmlElement, System.String)
  type: Method
  source:
    id: TagRead
    path: D:\projetos\uninfe\trunk\fontes\.NET Standard\Unimake.Business.DFe\Utility\XMLUtility.cs
    startLine: 304
  assemblies:
  - Unimake.Business.DFe
  namespace: Unimake.Business.DFe.Utility
  summary: "\nBusca o nome de uma determinada TAG em um Elemento do XML para ver se existe, se existir retorna seu conteúdo da TAG.\n"
  example: []
  syntax:
    content: public static string TagRead(XmlElement xmlElement, string tagName)
    parameters:
    - id: xmlElement
      type: System.Xml.XmlElement
      description: Elemento do XML onde será pesquisado o Nome da TAG
    - id: tagName
      type: System.String
      description: Nome da Tag que será pesquisado
    return:
      type: System.String
      description: Conteúdo da tag
    content.vb: Public Shared Function TagRead(xmlElement As XmlElement, tagName As String) As String
  overload: Unimake.Business.DFe.Utility.XMLUtility.TagRead*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Unimake.Business.DFe.Utility
  commentId: N:Unimake.Business.DFe.Utility
  name: Unimake.Business.DFe.Utility
  nameWithType: Unimake.Business.DFe.Utility
  fullName: Unimake.Business.DFe.Utility
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: Unimake.Business.DFe.Utility.XMLUtility.CalcularDVChave*
  commentId: Overload:Unimake.Business.DFe.Utility.XMLUtility.CalcularDVChave
  name: CalcularDVChave
  nameWithType: XMLUtility.CalcularDVChave
  fullName: Unimake.Business.DFe.Utility.XMLUtility.CalcularDVChave
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Unimake.Business.DFe.Utility.XMLUtility.Deserializar*
  commentId: Overload:Unimake.Business.DFe.Utility.XMLUtility.Deserializar
  name: Deserializar
  nameWithType: XMLUtility.Deserializar
  fullName: Unimake.Business.DFe.Utility.XMLUtility.Deserializar
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Xml.XmlDocument
  commentId: T:System.Xml.XmlDocument
  parent: System.Xml
  isExternal: true
  name: XmlDocument
  nameWithType: XmlDocument
  fullName: System.Xml.XmlDocument
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: true
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: Unimake.Business.DFe.Utility.XMLUtility.DetectDFeType*
  commentId: Overload:Unimake.Business.DFe.Utility.XMLUtility.DetectDFeType
  name: DetectDFeType
  nameWithType: XMLUtility.DetectDFeType
  fullName: Unimake.Business.DFe.Utility.XMLUtility.DetectDFeType
- uid: Unimake.Business.DFe.Servicos.TipoDFe
  commentId: T:Unimake.Business.DFe.Servicos.TipoDFe
  parent: Unimake.Business.DFe.Servicos
  name: TipoDFe
  nameWithType: TipoDFe
  fullName: Unimake.Business.DFe.Servicos.TipoDFe
- uid: Unimake.Business.DFe.Servicos
  commentId: N:Unimake.Business.DFe.Servicos
  name: Unimake.Business.DFe.Servicos
  nameWithType: Unimake.Business.DFe.Servicos
  fullName: Unimake.Business.DFe.Servicos
- uid: Unimake.Business.DFe.Utility.XMLUtility.GerarCodigoNumerico*
  commentId: Overload:Unimake.Business.DFe.Utility.XMLUtility.GerarCodigoNumerico
  name: GerarCodigoNumerico
  nameWithType: XMLUtility.GerarCodigoNumerico
  fullName: Unimake.Business.DFe.Utility.XMLUtility.GerarCodigoNumerico
- uid: Unimake.Business.DFe.Utility.XMLUtility.GetChaveDFe*
  commentId: Overload:Unimake.Business.DFe.Utility.XMLUtility.GetChaveDFe
  name: GetChaveDFe
  nameWithType: XMLUtility.GetChaveDFe
  fullName: Unimake.Business.DFe.Utility.XMLUtility.GetChaveDFe
- uid: Unimake.Business.DFe.Utility.XMLUtility.Serializar*
  commentId: Overload:Unimake.Business.DFe.Utility.XMLUtility.Serializar
  name: Serializar
  nameWithType: XMLUtility.Serializar
  fullName: Unimake.Business.DFe.Utility.XMLUtility.Serializar
- uid: System.Collections.Generic.List{Unimake.Business.DFe.Utility.XMLUtility.TNameSpace}
  commentId: T:System.Collections.Generic.List{Unimake.Business.DFe.Utility.XMLUtility.TNameSpace}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<XMLUtility.TNameSpace>
  nameWithType: List<XMLUtility.TNameSpace>
  fullName: System.Collections.Generic.List<Unimake.Business.DFe.Utility.XMLUtility.TNameSpace>
  nameWithType.vb: List(Of XMLUtility.TNameSpace)
  fullName.vb: System.Collections.Generic.List(Of Unimake.Business.DFe.Utility.XMLUtility.TNameSpace)
  name.vb: List(Of XMLUtility.TNameSpace)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Unimake.Business.DFe.Utility.XMLUtility.TNameSpace
    name: XMLUtility.TNameSpace
    nameWithType: XMLUtility.TNameSpace
    fullName: Unimake.Business.DFe.Utility.XMLUtility.TNameSpace
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Unimake.Business.DFe.Utility.XMLUtility.TNameSpace
    name: XMLUtility.TNameSpace
    nameWithType: XMLUtility.TNameSpace
    fullName: Unimake.Business.DFe.Utility.XMLUtility.TNameSpace
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Unimake.Business.DFe.Utility.XMLUtility.TagExist*
  commentId: Overload:Unimake.Business.DFe.Utility.XMLUtility.TagExist
  name: TagExist
  nameWithType: XMLUtility.TagExist
  fullName: Unimake.Business.DFe.Utility.XMLUtility.TagExist
- uid: System.Xml.XmlElement
  commentId: T:System.Xml.XmlElement
  parent: System.Xml
  isExternal: true
  name: XmlElement
  nameWithType: XmlElement
  fullName: System.Xml.XmlElement
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Unimake.Business.DFe.Utility.XMLUtility.TagRead*
  commentId: Overload:Unimake.Business.DFe.Utility.XMLUtility.TagRead
  name: TagRead
  nameWithType: XMLUtility.TagRead
  fullName: Unimake.Business.DFe.Utility.XMLUtility.TagRead
