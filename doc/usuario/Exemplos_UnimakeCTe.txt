// ---------------------------------------------------------------------------------------------------------
// Acessando certificado digital:
// ---------------------------------------------------------------------------------------------------------

CertificadoDigital cert = new CertificadoDigital();
X509Certificate2 CertificadoSelecionado = cert.Selecionar();

// ---------------------------------------------------------------------------------------------------------
// Convertendo certificado digital A1 para Bytes para arquivar em base de dados
// ---------------------------------------------------------------------------------------------------------
var certificadoDigital = new CertificadoDigital();
var bytes = certificadoDigital.ToByteArray(path);

// ---------------------------------------------------------------------------------------------------------
// Convertendo certificado digital de Bytes para X509Certificate2 para fazer uso do mesmo
// ---------------------------------------------------------------------------------------------------------
X509Certificate2 CertificadoSelecionado = certificadoDigital.CarregarCertificadoDigitalA1(bytes, password);

// ---------------------------------------------------------------------------------------------------------
//Enviando XML para consultar Status
// ---------------------------------------------------------------------------------------------------------

try
{
    var xml = new ConsStatServCte
    {
        Versao = "3.00",
        TpAmb = TipoAmbiente.Homologacao
    };

    var configuracao = new Configuracao
    {
        TipoDFe = TipoDFe.CTe,
        CodigoUF = (int)UFBrasil.AP,
        TipoEmissao = TipoEmissao.Normal,
        CertificadoDigital = CertificadoSelecionado
    };

    var statusServico = new Unimake.Business.DFe.Servicos.CTe.StatusServico(xml, configuracao);
    statusServico.Executar();
    MessageBox.Show(statusServico.RetornoWSString);
    MessageBox.Show(statusServico.Result.XMotivo);
}
catch(Exception ex)
{
    CatchException(ex);
}

// ---------------------------------------------------------------------------------------------------------
//Enviando XML de consulta situação da CTe
// ---------------------------------------------------------------------------------------------------------

try
{
    var xml = new ConsSitCTe
    {
        Versao = "3.00",
        TpAmb = TipoAmbiente.Homologacao,
        ChCTe = "50200210859283000185570010000005621912070311"
    };

    var configuracao = new Configuracao
    {
        TipoDFe = TipoDFe.CTe,
        CertificadoDigital = CertificadoSelecionado
    };

    var consultaProtocolo = new Unimake.Business.DFe.Servicos.CTe.ConsultaProtocolo(xml, configuracao);
    consultaProtocolo.Executar();

    MessageBox.Show(consultaProtocolo.RetornoWSString);
    MessageBox.Show(consultaProtocolo.Result.XMotivo);
}
catch(Exception ex)
{
    CatchException(ex);
}

// ---------------------------------------------------------------------------------------------------------
//Enviando XML de consulta recibo do lote de cte enviado
// ---------------------------------------------------------------------------------------------------------

try
{
    var xml = new ConsReciCTe
    {
        Versao = "3.00",
        TpAmb = TipoAmbiente.Homologacao,
        NRec = "501000074526711"
    };

    var configuracao = new Configuracao
    {
        TipoDFe = TipoDFe.CTe,
        CertificadoDigital = CertificadoSelecionado
    };

    var retAutorizacao = new Unimake.Business.DFe.Servicos.CTe.RetAutorizacao(xml, configuracao);
    retAutorizacao.Executar();
    MessageBox.Show(retAutorizacao.RetornoWSString);
    MessageBox.Show(retAutorizacao.Result.XMotivo);
}
catch(Exception ex)
{
    CatchException(ex);
}

// ---------------------------------------------------------------------------------------------------------
//Enviando XML de inutilização
// ---------------------------------------------------------------------------------------------------------

try
{
    var xml = new InutCTe
    {
        Versao = "3.00",
        InfInut = new InutCTeInfInut
        {
            Ano = "19",
            CNPJ = "06117473000150",
            CUF = UFBrasil.PR,
            Mod = ModeloDFe.CTe,
            NCTIni = 57919,
            NCTFin = 57919,
            Serie = 1,
            TpAmb = TipoAmbiente.Homologacao,
            XJust = "Justificativa da inutilizacao de teste"
        }
    };

    var configuracao = new Configuracao
    {
        TipoDFe = TipoDFe.CTe,
        CertificadoDigital = CertificadoSelecionado
    };

    var inutilizacao = new Unimake.Business.DFe.Servicos.CTe.Inutilizacao(xml, configuracao);
    inutilizacao.Executar();
    MessageBox.Show(inutilizacao.RetornoWSString);
    MessageBox.Show(inutilizacao.Result.InfInut.XMotivo);

    //Gravar o XML de distribuição se a inutilização foi homologada
    switch(inutilizacao.Result.InfInut.CStat)
    {
        case 102: //Inutilização homologada
            inutilizacao.GravarXmlDistribuicao(@"c:\testenfe\");
            break;

        default: //Inutilização rejeitada
            inutilizacao.GravarXmlDistribuicao(@"c:\testenfe\");
            break;
    }
}
catch(Exception ex)
{
    CatchException(ex);
}

// ---------------------------------------------------------------------------------------------------------
//Enviando XML de consulta cadastro do contribuinte
// ---------------------------------------------------------------------------------------------------------

try
{
    var xml = new Unimake.Business.DFe.Xml.CTe.ConsCad
    {
        Versao = "2.00",
        InfCons = new InfCons()
        {
            CNPJ = "06117473000150",
            UF = UFBrasil.PR
        }
    };

    var configuracao = new Configuracao
    {
        TipoDFe = TipoDFe.CTe,
        CertificadoDigital = CertificadoSelecionado
    };

    var consultaCad = new Unimake.Business.DFe.Servicos.CTe.ConsultaCadastro(xml, configuracao);
    consultaCad.Executar();
    MessageBox.Show(consultaCad.RetornoWSString);
    MessageBox.Show(consultaCad.Result.InfCons.XMotivo);
}
catch(Exception ex)
{
    CatchException(ex);
}

// ---------------------------------------------------------------------------------------------------------
//Enviando XML de eventos
// ---------------------------------------------------------------------------------------------------------

try
{
    var xml = new EventoCTe
    {
        Versao = "3.00",
        InfEvento = new Unimake.Business.DFe.Xml.CTe.InfEvento(new Unimake.Business.DFe.Xml.CTe.DetEventoCanc
        {
            NProt = "141200000007987",
            VersaoEvento = "3.00",
            XJust = "Justificativa para cancelamento da CTe de teste"
        })
        {
            COrgao = UFBrasil.PR,
            ChCTe = "41200210859283000185570010000005671227070615",
            CNPJ = "10859283000185",
            DhEvento = DateTime.Now,
            TpEvento = TipoEventoCTe.Cancelamento,
            NSeqEvento = 1,
            TpAmb = TipoAmbiente.Homologacao
        }
    };

    var configuracao = new Configuracao
    {
        TipoDFe = TipoDFe.CTe,
        CertificadoDigital = CertificadoSelecionado
    };


    var recepcaoEvento = new Unimake.Business.DFe.Servicos.CTe.RecepcaoEvento(xml, configuracao);

    //xml.LerXML<EventoCTe>(recepcaoEvento.ConteudoXMLAssinado);

    recepcaoEvento.Executar();
    MessageBox.Show(recepcaoEvento.RetornoWSString);
    MessageBox.Show(recepcaoEvento.Result.InfEvento.XMotivo);

    //Gravar o XML de distribuição se a inutilização foi homologada
    switch(recepcaoEvento.Result.InfEvento.CStat)
    {
        case 134: //Recebido pelo Sistema de Registro de Eventos, com vinculação do evento no respectivo CT-e com situação diferente de Autorizada.
        case 135: //Recebido pelo Sistema de Registro de Eventos, com vinculação do evento no respetivo CTe.
        case 136: //Recebido pelo Sistema de Registro de Eventos – vinculação do evento ao respectivo CT-e prejudicado.
            recepcaoEvento.GravarXmlDistribuicao(@"c:\testecte\");
            break;

        default:
            //Quando o evento é rejeitado pela Sefaz.
            break;
    }
}
catch(Exception ex)
{
    CatchException(ex);
}

// ---------------------------------------------------------------------------------------------------------
// Enviando XML da CTe
// ---------------------------------------------------------------------------------------------------------

try
{
    #region CriarCTe

    var xml = new EnviCTe
    {
        Versao = "3.00",
        IdLote = "000000000000001",
        CTe = new List<CTe> {
            new CTe
            {
                InfCTe = new Unimake.Business.DFe.Xml.CTe.InfCTe
                {
                    Versao = "3.00",

                    Ide = new Unimake.Business.DFe.Xml.CTe.Ide
                    {
                        CUF = UFBrasil.PR,
                        CCT = "01722067",
                        CFOP  = "6352",
                        NatOp = "PREST.SERV.TRANSP.INDUSTR",
                        Mod = ModeloDFe.CTe,
                        Serie = 1,
                        NCT = 861 ,
                        DhEmi = DateTime.Now,
                        TpImp = FormatoImpressaoDACTE.NormalPaisagem,
                        TpEmis = TipoEmissao.Normal,
                        TpAmb = TipoAmbiente.Homologacao,
                        TpCTe = TipoCTe.Normal,
                        ProcEmi = ProcessoEmissao.AplicativoContribuinte,
                        VerProc = "UNICO V8.0",
                        CMunEnv = "4118402" ,
                        XMunEnv = "PARANAVAI",
                        UFEnv = UFBrasil.PR,
                        Modal =  ModalidadeTransporteCTe.Rodoviario,
                        TpServ = TipoServicoCTe.Normal,
                        CMunIni = "4118402",
                        XMunIni = "PARANAVAI",
                        UFIni = UFBrasil.PR,
                        CMunFim = "3305109",
                        XMunFim = "SAO JOAO DE MERITI",
                        UFFim =  UFBrasil.RJ,
                        Retira = SimNao.Nao,
                        IndIEToma = IndicadorIEDestinatario.ContribuinteICMS,
                        Toma3 =  new Toma3
                        {
                            Toma= TomadorServicoCTe.Remetente,
                        },
                    },
                    Emit = new Unimake.Business.DFe.Xml.CTe.Emit
                    {
                        CNPJ = "31905001000109",
                        IE = "9079649730",
                        XNome = "EXATUS MOVEIS EIRELI",
                        XFant = "EXATUS MOVEIS",
                        EnderEmit = new Unimake.Business.DFe.Xml.CTe.EnderEmit
                        {
                            XLgr = "RUA JOAQUIM F. DE SOUZA",
                            Nro = "01112",
                            XBairro = "VILA TEREZINHA",
                            CMun = 4118402,
                            XMun = "PARANAVAI",
                            CEP = "87706675",
                            UF = UFBrasil.PR,
                            Fone = "04434237530",
                        },
                    },
                    Rem = new Unimake.Business.DFe.Xml.CTe.Rem
                    {
                        CNPJ = "10197843000183",
                        IE = "9044791606",
                        XNome = "CT-E EMITIDO EM AMBIENTE DE HOMOLOGACAO - SEM VALOR FISCAL",
                        XFant = "CT-E EMITIDO EM AMBIENTE DE HOMOLOGACAO - SEM VALOR FISCAL",
                        Fone = "04434225480",
                        EnderReme = new Unimake.Business.DFe.Xml.CTe.EnderReme
                        {
                            XLgr = "RUA AMAZONAS, 1140",
                            Nro = "1140",
                            XBairro = "JD. SAO FELICIO",
                            CMun = 4118402,
                            XMun = "PARANAVAI",
                            CEP = "87702300",
                            UF = UFBrasil.PR,
                            CPais = 1058,
                            XPais = "BRASIL",
                        }
                    },
                    Dest = new Unimake.Business.DFe.Xml.CTe.Dest
                    {
                        CNPJ = "00000000075108",
                        IE = "ISENTO",
                        XNome = "CT-E EMITIDO EM AMBIENTE DE HOMOLOGACAO - SEM VALOR FISCAL",
                        EnderDest = new Unimake.Business.DFe.Xml.CTe.EnderDest
                        {
                            XLgr = "R. GESSYR GONCALVES FONTES, 55",
                            Nro = "55",
                            XBairro = "CENTRO",
                            CMun = 3305109,
                            XMun = "SAO JOAO DE MERITI",
                            CEP = "25520570",
                            UF = UFBrasil.RJ,
                            CPais = 1058,
                            XPais = "BRASIL",
                        },
                    },
                    VPrest = new Unimake.Business.DFe.Xml.CTe.VPrest
                    {
                        VTPrest = 50.00,
                        VRec = 50.00,
                        Comp = new List<Unimake.Business.DFe.Xml.CTe.Comp>
                        {
                            new Unimake.Business.DFe.Xml.CTe.Comp
                            {
                                XNome = "FRETE VALOR",
                                VComp = 50.00,
                            },
                        },
                    },
                    Imp = new Unimake.Business.DFe.Xml.CTe.Imp
                    {
                        ICMS = new Unimake.Business.DFe.Xml.CTe.ICMS
                        {
                            ICMSSN = new Unimake.Business.DFe.Xml.CTe.ICMSSN
                            {
                                CST = "90",
                                IndSN = SimNao.Sim,
                            }
                            }
                    },
                    InfCTeNorm = new Unimake.Business.DFe.Xml.CTe.InfCTeNorm
                    {
                        InfCarga = new Unimake.Business.DFe.Xml.CTe.InfCarga
                        {
                            VCarga = 6252.96,
                            ProPred = "MOVEIS",
                            InfQ = new List<Unimake.Business.DFe.Xml.CTe.InfQ>
                            {
                                new Unimake.Business.DFe.Xml.CTe.InfQ
                                {
                                    CUnid = CodigoUnidadeMedidaCTe.KG,
                                    TpMed ="PESO BRUTO",
                                    QCarga = 320.0000,
                                },
                                new Unimake.Business.DFe.Xml.CTe.InfQ
                                {
                                    CUnid = CodigoUnidadeMedidaCTe.UNIDADE,
                                    TpMed ="UNIDADE",
                                    QCarga = 1.0000,
                                },
                            },
                        },
                        InfDoc = new Unimake.Business.DFe.Xml.CTe.InfDoc
                        {
                            InfNFe = new List<Unimake.Business.DFe.Xml.CTe.InfNFe>
                            {
                                new Unimake.Business.DFe.Xml.CTe.InfNFe
                                {
                                    Chave = "41200306117473000150550030000652511417023254"
                                },
                            },
                        },
                        InfModal = new Unimake.Business.DFe.Xml.CTe.InfModal
                        {
                            VersaoModal="3.00",
                            Rodo = new Unimake.Business.DFe.Xml.CTe.Rodo
                            {
                                RNTRC = "44957333",
                                Occ = new List<Unimake.Business.DFe.Xml.CTe.Occ>
                                {
                                    new Unimake.Business.DFe.Xml.CTe.Occ
                                    {
                                        NOcc = 810,
                                        DEmi = DateTime.Now,
                                        EmiOcc = new Unimake.Business.DFe.Xml.CTe.EmiOcc
                                        {
                                            CNPJ = "31905001000109",
                                            CInt = "0000001067",
                                            IE = "9079649730",
                                            UF = UFBrasil.PR,
                                            Fone = "04434237530",
                                        },
                                    },
                                },
                            },
                        },
                    },
                    InfRespTec = new Unimake.Business.DFe.Xml.CTe.InfRespTec
                    {
                        CNPJ = "06117473000150",
                        XContato = "Wandrey Mundin Ferreira",
                        Email= "wandrey@unimake.com.br",
                        Fone = "04431414900",
                    },
                },
            },
        },
    };

    #endregion CriarCTe

    var configuracao = new Configuracao
    {
        TipoDFe = TipoDFe.CTe,
        CertificadoDigital = CertificadoSelecionado
    };

    var autorizacao = new Unimake.Business.DFe.Servicos.CTe.Autorizacao(xml, configuracao);
    autorizacao.Executar();
    MessageBox.Show(autorizacao.RetornoWSString);

    if(autorizacao.Result != null)
    {
        MessageBox.Show(autorizacao.Result.XMotivo);

        if(autorizacao.Result.CStat == 103) //103 = Lote Recebido com Sucesso
        {
            // Finalizar através da consulta do recibo.
            var xmlRec = new ConsReciCTe
            {
                Versao = "3.00",
                TpAmb = TipoAmbiente.Homologacao,
                NRec = autorizacao.Result.InfRec.NRec
            };

            var configRec = new Configuracao
            {
                TipoDFe = TipoDFe.CTe,
                CertificadoDigital = CertificadoSelecionado
            };

            var retAutorizacao = new Unimake.Business.DFe.Servicos.CTe.RetAutorizacao(xmlRec, configRec);
            retAutorizacao.Executar();

            autorizacao.RetConsReciCTe = retAutorizacao.Result;
            autorizacao.GravarXmlDistribuicao(@"c:\testenfe\");

            //Simulação da finalização do CTe através da consulta situação
            autorizacao.RetConsReciCTe = null; //Zerar para conseguir testar

            var xmlSit = new ConsSitCTe
            {
                Versao = "3.00",
                TpAmb = TipoAmbiente.Homologacao,
                ChCTe = xml.CTe[0].InfCTe.Chave
            };

            var configSit = new Configuracao
            {
                TipoDFe = TipoDFe.CTe,
                CertificadoDigital = CertificadoSelecionado
            };

            var consultaProtocolo = new Unimake.Business.DFe.Servicos.CTe.ConsultaProtocolo(xmlSit, configSit);
            consultaProtocolo.Executar();

            autorizacao.RetConsSitCTes.Add(consultaProtocolo.Result);
            autorizacao.GravarXmlDistribuicao(@"c:\testenfe\");
        }
    }
}
catch(Exception ex)
{
    CatchException(ex);
}

// ---------------------------------------------------------------------------------------------------------
// Enviando a consulta de documentos fiscais destinados
// ---------------------------------------------------------------------------------------------------------

var nsu = "000000000000000";
var configuracao = new Configuracao
{
    TipoDFe = TipoDFe.CTe,
    CertificadoDigital = CertificadoSelecionado
};

pbConsultaDFe.Visible = true;
pbConsultaDFe.Minimum = 0;
Application.DoEvents();
pbConsultaDFe.Refresh();

while(true)
{
    try
    {
        var xml = new Unimake.Business.DFe.Xml.CTe.DistDFeInt
        {
            Versao = "1.00",
            TpAmb = TipoAmbiente.Producao,
            CNPJ = "31905001000109",
            CUFAutor = UFBrasil.PR,
            DistNSU = new Unimake.Business.DFe.Xml.CTe.DistNSU
            {
                UltNSU = nsu
            }
        };

        var distribuicaoDFe = new Unimake.Business.DFe.Servicos.CTe.DistribuicaoDFe(xml, configuracao);
        distribuicaoDFe.Executar();

        #region Atualizar ProgressBar

        if(pbConsultaDFe.Maximum != Convert.ToInt32(distribuicaoDFe.Result.MaxNSU))
        {
            pbConsultaDFe.Maximum = Convert.ToInt32(distribuicaoDFe.Result.MaxNSU);
        }

        pbConsultaDFe.Value = Convert.ToInt32(distribuicaoDFe.Result.UltNSU);
        pbConsultaDFe.Refresh();
        Application.DoEvents();

        #endregion Atualizar ProgressBar

        if(distribuicaoDFe.Result.CStat.Equals(138)) //Documentos localizados
        {
            var folder = @"c:\testenfe\doczipcte";

            if(Environment.MachineName == "MARCELO-PC")
            {
                folder = @"D:\temp\uninfe";
            }

            //Salvar os XMLs do docZIP no HD
            distribuicaoDFe.GravarXMLDocZIP(folder, true);
        }

        nsu = distribuicaoDFe.Result.UltNSU;

        if(Convert.ToInt64(distribuicaoDFe.Result.UltNSU) >= Convert.ToInt64(distribuicaoDFe.Result.MaxNSU))
        {
            break;
        }
    }
    catch(Exception ex)
    {
        CatchException(ex);
    }
}

pbConsultaDFe.Visible = false;
Application.DoEvents();

MessageBox.Show("Consulta finalizada.");
